{"version":3,"sources":["contexts/validationContext.tsx","components/signup/signup.tsx","components/address/address.tsx","components/personal-data/personal-data.tsx","components/confirmation/confirmationStep.tsx","components/sucess/sucessPage.tsx","steps-array/steps.tsx","contexts/formContext.tsx","components/checkout/checkout-form.tsx","App.tsx","index.tsx"],"names":["ValidationContext","createContext","ValidationContextProvider","children","input","a","zip","replace","options","method","mode","headers","fetch","response","json","data","erro","validity","invalid","message","locationData","city","localidade","street","logradouro","district","bairro","console","log","TypeError","Provider","value","emailValidation","email","length","RegExp","test","passwordValidation","password","passwordConfirmValidation","passwordConfirm","nameValidation","name","idNumberValidation","idNumber","cpf","itsValid","forEach","repeatedCpf","sum","i","parseInt","substring","checkDigit1","checkDigit2","phoneValidation","phone","country","isPossiblePhoneNumber","isValidPhoneNumber","zipValidation","useValidation","useContext","useStyles","makeStyles","button","float","SignUpForm","onFormSubmit","useForm","classes","useState","setEmail","setPassword","setPasswordConfirm","discounts","setDiscounts","features","setFeatures","errors","setErrors","onSubmit","e","preventDefault","TextField","error","helperText","placeholder","onChange","target","onBlur","variant","size","label","margin","fullWidth","required","type","onFocus","FormControlLabel","control","Switch","checked","color","Button","className","useStyle","shortLeftInput","marginRight","marginBottom","width","shortRightInput","longLeftInput","extraShortRightInput","previousButton","nextButton","AddressRegistration","previousStep","setStreet","number","setNumber","setCity","setDistrict","setZip","action","onClick","countrySelect","phoneSelect","PersonalData","userData","setName","id","setId","setPhone","setCountry","countryList","getCountries","phoneNumber","noValidate","select","map","option","MenuItem","AsYouType","nameInput","marginTop","display","normalInput","ConfirmationStep","readMode","setReadMode","focused","defaultValue","InputProps","readOnly","SucessWarning","src","process","alt","steps","FormContext","FormContextProvider","stepperDisplay","setStepperDisplay","setUserData","currentStep","setCurrentStep","nextStep","useEffect","newdata","styles","stepper","padding","CheckoutForm","Box","Stepper","activeStep","alternativeLabel","style","Step","StepLabel","container","backgroundColor","borderRadius","boxShadow","App","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7571743.chunk.js","sourcesContent":["import {createContext, ReactNode, useContext} from 'react'\r\nimport { isPossiblePhoneNumber, isValidPhoneNumber } from 'libphonenumber-js'\r\n\r\ntype Validation = {\r\n    passwordValidation: (password: string) => {invalid: boolean, message: string},\r\n    passwordConfirmValidation: (password: string, passwordConfirm: string) => {invalid: boolean, message: string}\r\n    emailValidation: (email: string) => {invalid: boolean, message: string},\r\n    nameValidation: (name: string) => {invalid: boolean, message: string},\r\n    idNumberValidation: (idNumber: string) => {invalid: boolean, message: string},\r\n    phoneValidation: (phone: string, country: any) => {invalid: boolean, message: string},\r\n    zipValidation: (input: string) => Promise<{\r\n        validity: {invalid: boolean, message: string},\r\n        locationData: {\r\n            city: string\r\n            street: string\r\n            district: string\r\n        } | null\r\n    }> \r\n}\r\n\r\n\r\ntype ValidationContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nconst ValidationContext = createContext({} as Validation)\r\n\r\nexport function ValidationContextProvider({children}: ValidationContextProviderProps) {\r\n    \r\n   \r\n    function emailValidation (email: string) {\r\n        if (email.length == 0) return {invalid:false, message: ''}\r\n        const regexValid = new RegExp(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/)\r\n        return !regexValid.test(email) ? (\r\n            {invalid:true, message: 'Please, provide a valid email account'}\r\n        ) : ({invalid:false, message: ''}) \r\n    }\r\n    \r\n    function passwordValidation(password: string) {\r\n        if (password.length == 0) return {invalid:false, message: ''}\r\n        const regexValid = new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/)   \r\n         return !regexValid.test(password) ? (\r\n             {invalid:true, message: 'your password must have at least 8 characters, one uppercase letter and one number'}\r\n             ) : ({invalid:false, message: ''})          \r\n    }\r\n\r\n    function passwordConfirmValidation(password:string, passwordConfirm: string) {\r\n        if (password.length !== 0 && passwordConfirm.length == 0) return {invalid: true, message: 'please, confirm your password'}\r\n        return (password !== passwordConfirm) ? ({invalid: true, message: 'passwords don\\'t match'}) : ({invalid: false, message: ''})\r\n    }\r\n\r\n    function nameValidation(name: string){\r\n        return (name.length < 4) ? ({invalid: true, message: 'Please, inform your full name'}) : ({invalid: false, message: ''})\r\n    }\r\n\r\n    function idNumberValidation(idNumber: string) {\r\n\r\n        var cpf = idNumber.replace(/\\D/g,'')\r\n    \r\n        const repeatedCPFs = [\r\n          '00000000000',\r\n          '11111111111',\r\n          '22222222222',\r\n          '33333333333',\r\n          '44444444444',\r\n          '55555555555',\r\n          '66666666666',\r\n          '77777777777',\r\n          '88888888888',\r\n          '99999999999'\r\n        ]\r\n    \r\n        let itsValid = true\r\n    \r\n        repeatedCPFs.forEach(repeatedCpf => {if (repeatedCpf == cpf) itsValid = false})\r\n    \r\n        var sum:number = 0\r\n    \r\n        for (let i:number = 0; i < 9; i++) sum = sum + parseInt(cpf.substring(i, i+1)) * (10 - i)\r\n          \r\n        var checkDigit1 = (sum * 10) % 11\r\n    \r\n        if((checkDigit1 == 10) || (checkDigit1 == 10)) checkDigit1 = 0\r\n    \r\n        if (checkDigit1 !== parseInt(cpf.substring(9, 10))) itsValid = false\r\n    \r\n        sum = 0 \r\n    \r\n        for (let i:number = 0; i < 10; i++) sum = sum + parseInt(cpf.substring(i, i+1)) * (11 - i)\r\n    \r\n        var checkDigit2 = (sum * 10) % 11\r\n    \r\n        if((checkDigit2 == 10) || (checkDigit2 == 11)) checkDigit2 = 0\r\n    \r\n        if(checkDigit2 !== parseInt(cpf.substring(10, 11))) itsValid = false\r\n    \r\n        return (itsValid == true) ? ({invalid:false, message: ''}) : ({invalid: true, message: 'Invalid ID Number. Only brazilian ID numbers (CPFs) are accepted. Get a CPF for testing at https://www.4devs.com.br/gerador_de_cpf'})\r\n    }\r\n\r\n    function phoneValidation(phone: string, country:any) {\r\n        \r\n        return (isPossiblePhoneNumber(phone, country) && isValidPhoneNumber(phone, country)) ? ({invalid: false, message: ''}) : ({invalid: true, message: 'Invalid phone number'})\r\n        \r\n         \r\n    }\r\n    \r\n    async function zipValidation(input: string) {\r\n        try {\r\n            const zip = input.replace(/\\D/g, '')\r\n            const options: RequestInit = {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json'                \r\n                  },\r\n            }\r\n            const response = await fetch(`https://viacep.com.br/ws/${zip}/json`, options)\r\n            const data:any = await response.json()\r\n            if(data.erro) {\r\n                return {\r\n                    validity: {invalid: true, message: 'Inexisting ZIP Code (for testing, try: 01001-001)'},\r\n                    locationData: null\r\n                }\r\n            } \r\n            return {\r\n                validity: {invalid: false, message: ''},\r\n                locationData: {\r\n                    city: data.localidade,\r\n                    street: data.logradouro,\r\n                    district: data.bairro\r\n                }\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            if(err instanceof TypeError) {\r\n                return {\r\n                    validity: {invalid: true, message: 'Invalid ZIP Code format (for testing, try: 01001-001)'},\r\n                    locationData: null\r\n                }          \r\n            }            \r\n            return {\r\n                validity: {invalid: true, message: 'Failed to validate ZIP Code, try again later'},\r\n                locationData: null\r\n            }    \r\n        }           \r\n    }\r\n           \r\n\r\n    return (\r\n        <ValidationContext.Provider value={{\r\n            emailValidation,\r\n            passwordValidation,\r\n            passwordConfirmValidation,\r\n            nameValidation,\r\n            idNumberValidation,\r\n            phoneValidation,\r\n            zipValidation, \r\n        }}>\r\n            {children}\r\n        </ValidationContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useValidation = () => {\r\n    return useContext(ValidationContext)\r\n}","import { useState } from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport { TextField, Button, Switch, FormControlLabel } from \"@material-ui/core\";\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport {useValidation} from '../../contexts/validationContext'\r\n\r\nconst useStyles = makeStyles({\r\n  button: {\r\n    float: 'right'\r\n  }\r\n})\r\n\r\n\r\nfunction SignUpForm() {\r\n  const {passwordValidation, emailValidation, passwordConfirmValidation} = useValidation()\r\n  \r\n  const {onFormSubmit} = useForm()\r\n  \r\n  const classes = useStyles()\r\n\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [passwordConfirm, setPasswordConfirm] = useState<string>(\"\");\r\n  const [discounts, setDiscounts] = useState<boolean>(true);\r\n  const [features, setFeatures] = useState<boolean>(true);\r\n  const [errors, setErrors] = useState({\r\n    password: {\r\n      invalid: false,\r\n      message: '',\r\n    },\r\n    passwordConfirm:{\r\n      invalid: false,\r\n      message: '',\r\n    },\r\n    email: {\r\n      invalid: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        if (errors.password.invalid || errors.email.invalid || errors.passwordConfirm.invalid) return \r\n        onFormSubmit({ email, password, discounts, features });\r\n      }}\r\n    >\r\n      \r\n      <TextField\r\n        value={email}\r\n        error={errors.email.invalid}\r\n        helperText={errors.email.message}\r\n        placeholder='user@email.com'\r\n        onChange={(e) => {\r\n          setEmail(e.target.value);\r\n        }}\r\n        onBlur={()=> {\r\n          setErrors(errors => ({...errors, email: emailValidation(email)}));\r\n        }}\r\n        variant=\"filled\"\r\n        size=\"small\"\r\n        label=\"Email\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <TextField\r\n        error={errors.password.invalid}\r\n        type=\"password\"\r\n        helperText={errors.password.message}\r\n        placeholder='e.g. Testing123'\r\n        onBlur={() => {          \r\n          setErrors(errors => ({...errors, password: passwordValidation(password)}));\r\n        }}\r\n        onFocus={()=>{\r\n          setErrors(errors => ({...errors, password:{invalid:false, message: 'Disclaimer: this is just a prototype for testing, do not provide real passwords. Try something like \\'Testing123\\'.'}}))\r\n        }}\r\n        value={password}\r\n        onChange={(e) => {\r\n          setPassword(e.target.value);\r\n        }}\r\n        label=\"Password\"\r\n        variant=\"filled\"\r\n        margin=\"normal\"\r\n        size=\"small\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <TextField\r\n        error={errors.passwordConfirm.invalid}\r\n        type=\"password\"\r\n        helperText={errors.passwordConfirm.message}\r\n        placeholder='e.g. Testing123'\r\n        onBlur={() => {          \r\n          setErrors(errors => ({...errors, passwordConfirm: passwordConfirmValidation(password, passwordConfirm)}));\r\n        }}\r\n        value={passwordConfirm}\r\n        onChange={(e) => {\r\n          setPasswordConfirm(e.target.value);\r\n        }}\r\n        \r\n        label=\"Confirm Password\"\r\n        variant=\"filled\"\r\n        size=\"small\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <FormControlLabel\r\n        label=\"Discounts\"\r\n        control={\r\n          <Switch\r\n            checked={discounts}\r\n            onChange={(e) => {\r\n              setDiscounts(e.target.checked);\r\n            }}\r\n            name=\"promoções\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n      />\r\n      <FormControlLabel\r\n        label=\"New Features\"\r\n        control={\r\n          <Switch\r\n            checked={features}\r\n            onChange={(e) => {\r\n              setFeatures(e.target.checked);\r\n            }}\r\n            name=\"promoções\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n      />\r\n\r\n      <Button className={classes.button} type=\"submit\" color=\"primary\" variant=\"contained\">\r\n        Sign Up\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SignUpForm;\r\n","import {TextField, Button} from \"@material-ui/core\";\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport {useValidation} from '../../contexts/validationContext'\r\n \r\nconst useStyle = makeStyles({\r\n  shortLeftInput: {\r\n    marginRight: '.5rem',\r\n    marginBottom: '1rem',\r\n    width: 'calc(50% - 1rem)',\r\n  },\r\n  shortRightInput: {\r\n    marginBottom: '1rem',\r\n    width: '50%'\r\n  },\r\n  longLeftInput: {\r\n    marginRight: '.5rem',\r\n    marginBottom: '1rem',\r\n    width: 'calc(75% - .5rem)',\r\n  },\r\n  extraShortRightInput: {\r\n    marginBottom: '1rem',\r\n    width: '25%'\r\n  },\r\n  previousButton: {\r\n   float: 'left' \r\n  },\r\n  nextButton: {\r\n    float: 'right'\r\n  }\r\n})\r\n\r\nfunction AddressRegistration() {\r\n  const {onFormSubmit, previousStep} = useForm()\r\n  const {zipValidation} = useValidation()\r\n    \r\n  const classes = useStyle()\r\n\r\n  const [street, setStreet] = useState<string>(\"\");\r\n  const [number, setNumber] = useState<string>('');\r\n  const [city, setCity] = useState<string>('');\r\n  const [district, setDistrict] = useState<string>('');\r\n  const [zip, setZip] = useState<string>('');\r\n\r\n  const [errors, setErrors] = useState({\r\n    zip: {\r\n      invalid: false, \r\n      message: ''\r\n    } \r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form \r\n        className=\"registrationForm\"\r\n        action=\"submit\" \r\n        onSubmit={(e) => {\r\n        e.preventDefault()\r\n        if (errors.zip.invalid) return\r\n        onFormSubmit({street, number, city, district, zip})}}>\r\n        <TextField\r\n          value={zip}\r\n          error={errors.zip.invalid}\r\n          helperText={errors.zip.message}\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setZip(e.target.value);\r\n          }}\r\n          onBlur={async () => {\r\n            const response = await zipValidation(zip)\r\n            setErrors({zip:response.validity}) \r\n            if(response.locationData) {\r\n              setCity(response.locationData.city)\r\n              setStreet(response.locationData.street)\r\n              setDistrict(response.locationData.district)\r\n            }\r\n          }}\r\n          variant=\"filled\"\r\n          size=\"small\"\r\n          label=\"Zip Code\" \r\n          className={classes.shortLeftInput}   \r\n          required\r\n        ></TextField>\r\n        \r\n        <TextField\r\n          value={street}\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setStreet(e.target.value);\r\n          }}\r\n          variant=\"filled\"\r\n          size=\"small\"\r\n          label=\"Street\"\r\n          className={classes.longLeftInput}\r\n          required\r\n        ></TextField>\r\n        <TextField\r\n          value={number}\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setNumber(e.target.value);\r\n          }}\r\n          variant=\"filled\"\r\n          size=\"small\"\r\n          label=\"Number\"\r\n          className={classes.extraShortRightInput}\r\n          required\r\n        ></TextField>\r\n        \r\n        <TextField\r\n          type=\"text\"\r\n          value={city}\r\n          onChange={(e) => {\r\n            setCity(e.target.value);\r\n          }}\r\n          variant=\"filled\"\r\n          size=\"small\"\r\n          label=\"City\"\r\n          className={classes.shortLeftInput}\r\n          required\r\n        ></TextField>\r\n        <TextField\r\n          type=\"text\"\r\n          value={district}\r\n          onChange={(e) => {\r\n            setDistrict(e.target.value);\r\n          }}\r\n          variant=\"filled\"\r\n          size=\"small\"\r\n          label=\"District\"\r\n          required\r\n          className={classes.shortRightInput}\r\n        ></TextField>\r\n        <Button onClick={previousStep} className={classes.previousButton} color=\"primary\" variant=\"contained\">\r\n          Back\r\n        </Button>\r\n        <Button type=\"submit\" className={classes.nextButton} color=\"primary\" variant=\"contained\">\r\n          Next\r\n        </Button>\r\n        \r\n      </form>\r\n\r\n        \r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default AddressRegistration;\r\n","import { useState } from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nimport { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport {useValidation} from '../../contexts/validationContext'\r\nimport { AsYouType, getCountries } from 'libphonenumber-js'\r\n\r\nconst useStyles = makeStyles({ \r\n  countrySelect: {\r\n    marginRight: '.25rem',\r\n    width: 'calc(20% - .25rem)'\r\n  },\r\n  phoneSelect: {\r\n    width: '80%'\r\n  },\r\n  button: {\r\n    float: 'right'\r\n  }\r\n})\r\n\r\nfunction PersonalData() {\r\n  const { onFormSubmit, userData } = useForm();\r\n\r\n  const {nameValidation, idNumberValidation, phoneValidation} = useValidation()\r\n\r\n  const classes = useStyles()\r\n\r\n  const [name, setName] = useState<string>(userData.name);\r\n  const [id, setId] = useState<string>(userData.id);\r\n  const [phone, setPhone] = useState<string>(userData.phone)\r\n\r\n  const [country, setCountry] = useState<any>(userData.country || 'BR')\r\n  const countryList = getCountries()\r\n\r\n  const [errors, setErrors] = useState({\r\n    name:{\r\n      invalid: false,\r\n      message: ''\r\n    },\r\n    idNumber: {\r\n      invalid: false,\r\n      message: ''\r\n    },\r\n    phoneNumber: {\r\n      invalid: false,\r\n      message: ''\r\n    }\r\n  })\r\n\r\n\r\n  return (\r\n    <form\r\n    className=\"signInForm\"\r\n      action=\"submit\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        if (errors.idNumber.invalid || errors.idNumber.invalid || errors.name.invalid) return\r\n        onFormSubmit({ name, id, phone, country });\r\n      }}\r\n      noValidate\r\n      \r\n    >\r\n      <TextField\r\n        value={name}\r\n        error={errors.name.invalid}\r\n        helperText={errors.name.message}\r\n        onBlur={(e)=>{\r\n          setErrors(errors => ({...errors, name: nameValidation(name || e.target.value)}))\r\n        }}\r\n        onChange={(e) => {\r\n          setName(e.target.value);\r\n        }}\r\n        placeholder='Name Surname'\r\n        variant=\"filled\"\r\n        size=\"small\"\r\n        label=\"Full Name\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <TextField\r\n        error={errors.idNumber.invalid}\r\n        helperText={errors.idNumber.message}\r\n        value={id}\r\n        onChange={(e) => {\r\n          setId(e.target.value);\r\n        }}\r\n        onBlur={(e)=>{\r\n          if(e.target.value.length === 0) return\r\n          setErrors(errors => ({...errors, idNumber: idNumberValidation(id)}))\r\n        }}\r\n        variant=\"filled\"\r\n        size=\"small\"\r\n        type=\"text\"\r\n        label=\"ID Number (CPF)\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n\r\n      <TextField\r\n        id=\"standard-select-currency\"\r\n        select\r\n        variant=\"filled\"\r\n        size=\"small\"\r\n        margin=\"normal\"\r\n        value={country}\r\n        onChange={(e)=>{\r\n          setCountry(e.target.value)\r\n        }}\r\n        className={classes.countrySelect}\r\n      >\r\n        {countryList.map((option) => (\r\n          <MenuItem key={option} value={option}>\r\n            {option}\r\n          </MenuItem>\r\n        ))}\r\n      </TextField>\r\n\r\n      <TextField\r\n        error={errors.phoneNumber.invalid}\r\n        helperText={errors.phoneNumber.message}\r\n        value={phone}\r\n        onChange={(e) => {\r\n          const phone = new AsYouType(country).input(e.target.value)\r\n          setPhone(phone);\r\n        }}\r\n        onBlur={(e)=>{\r\n          if(e.target.value.length === 0) return\r\n          setErrors(errors => ({...errors, phoneNumber: phoneValidation(phone, country)}))\r\n        }}\r\n        label=\"Phone Number\"\r\n        placeholder=\"\"\r\n        type=\"tel\"\r\n        variant=\"filled\"\r\n        size=\"small\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n        className={classes.phoneSelect}\r\n      ></TextField>  \r\n      \r\n      <Button className={classes.button} type=\"submit\" color=\"primary\" variant=\"contained\">\r\n        Next\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default PersonalData;\r\n","import { useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport {AsYouType} from 'libphonenumber-js'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport {useValidation} from '../../contexts/validationContext'\r\n\r\nconst useStyles = makeStyles({\r\n  nameInput: {\r\n    marginBottom: '1rem',\r\n    marginTop: '1rem',\r\n    width: '75%',\r\n    display: 'block'\r\n  },\r\n  normalInput: {\r\n    marginBottom: '1rem',\r\n    width: '50%'\r\n  },\r\n  button: {\r\n    display: 'block'\r\n  }\r\n})\r\n\r\n\r\nfunction ConfirmationStep() {\r\n  const { userData, onFormSubmit } = useForm();\r\n\r\n  const {nameValidation, zipValidation, idNumberValidation, phoneValidation} = useValidation()\r\n\r\n  const classes = useStyles()\r\n\r\n  const [readMode, setReadMode] = useState<boolean>(true);\r\n\r\n  const [name, setName] = useState<string>(userData.name);\r\n  const [id, setId] = useState<string>(userData.id);\r\n  const [street, setStreet] = useState<string>(userData.street);\r\n  const [city, setCity] = useState<string>(userData.city);\r\n  const [district, setDistrict] = useState<string>(userData.district);\r\n  const [number, setNumber] = useState<string>(userData.number);\r\n  const [zip, setZip] = useState<string>(userData.zip);\r\n  const [phone, setPhone] = useState(userData.phone)\r\n\r\n  const [errors, setErrors] = useState({\r\n    name:{\r\n      invalid: false,\r\n      message: ''\r\n    },\r\n    zip: {\r\n      invalid: false, \r\n      message: ''\r\n    },\r\n    idNumber: {\r\n      invalid: false,\r\n      message: ''\r\n    },\r\n    phoneNumber: {\r\n      invalid: false,\r\n      message: ''\r\n    }\r\n  })\r\n\r\n\r\n  function toggleReadMode() {\r\n    setReadMode(!readMode);\r\n  }\r\n\r\n  return (\r\n    <form action=\"submit\"\r\n    onSubmit={(e)=> {\r\n      e.preventDefault();\r\n      if (errors.zip.invalid || errors.idNumber.invalid || errors.phoneNumber.invalid || errors.name.invalid) return\r\n      onFormSubmit({name, id, street, number, city, district, zip})\r\n    }}\r\n    >\r\n      <Button \r\n      variant=\"outlined\" \r\n      color=\"primary\" \r\n      className={classes.button}\r\n      onClick={toggleReadMode}\r\n      >\r\n        {readMode ? 'Edit Data' : 'Done' }\r\n      </Button>\r\n      \r\n      <TextField\r\n        id=\"name\"\r\n        value={name}\r\n        onChange={(e) => {\r\n          setName(e.target.value);\r\n        }}\r\n        error={errors.name.invalid}\r\n        helperText={errors.name.message}\r\n        onBlur={()=>{\r\n          setErrors(errors => ({...errors, name: nameValidation(name)}))\r\n        }}\r\n        label=\"Name\"\r\n        focused={!readMode}\r\n        defaultValue={name}\r\n        className={classes.nameInput}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        error={errors.idNumber.invalid}\r\n        helperText={errors.idNumber.message}\r\n        id=\"id\"\r\n        value={id}\r\n        onChange={(e) => {\r\n            setId(e.target.value);\r\n        }}\r\n        onBlur={(e)=> {\r\n          setErrors(errors => ({...errors, idNumber: idNumberValidation(id)}))\r\n        }}\r\n        label=\"ID Number\"\r\n        type=\"text\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        className={classes.normalInput}\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        error={errors.phoneNumber.invalid}\r\n        helperText={errors.phoneNumber.message}\r\n        value={phone}\r\n        onChange={(e) => {\r\n          const phone = new AsYouType(userData.country).input(e.target.value)\r\n          setPhone(phone);\r\n        }}\r\n        onBlur={()=>{\r\n          setErrors(errors => ({...errors, phoneNumber: phoneValidation(phone, userData.country)}))\r\n        }}\r\n        label=\"Phone Number\"\r\n        type=\"tel\"\r\n        focused={!readMode}\r\n        className={classes.normalInput}\r\n        fullWidth\r\n        required\r\n      ></TextField> \r\n      <TextField\r\n        id=\"zip\"\r\n        error={errors.zip.invalid}\r\n        helperText={errors.zip.message}\r\n        value={zip}\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          setZip(e.target.value);\r\n        }}\r\n        onBlur={async () => {\r\n          const response = await zipValidation(zip)\r\n          setErrors(errors => ({...errors, zip:response.validity})) \r\n          if(response.locationData) {\r\n            setCity(response.locationData.city)\r\n            setStreet(response.locationData.street)\r\n            setDistrict(response.locationData.district)\r\n          }\r\n        }}\r\n        label=\"Zip Code\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        className={classes.normalInput}\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"street\"\r\n        value={street}\r\n        onChange={(e) => {\r\n          setStreet(e.target.value);\r\n        }}\r\n        label=\"Street\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        className={classes.normalInput}\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"number\"\r\n        value={number}\r\n        onChange={(e) => {\r\n          setNumber(e.target.value);\r\n        }}\r\n        label=\"Number\"\r\n        focused={!readMode}\r\n        className={classes.normalInput}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"city\"\r\n        value={city}\r\n        onChange={(e) => {\r\n          setCity(e.target.value);\r\n        }}\r\n        label=\"City\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        className={classes.normalInput}\r\n\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"district\"\r\n        value={district}\r\n        onChange={(e) => {\r\n          setDistrict(e.target.value);\r\n        }}\r\n        label=\"District\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        className={classes.normalInput}\r\n        fullWidth\r\n        required\r\n      />      \r\n      \r\n      <Button \r\n      variant=\"contained\"\r\n      type=\"submit\"\r\n      color=\"primary\" \r\n      className={classes.button}\r\n      >\r\n        Confirm and Submit\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default ConfirmationStep;\r\n","import \"./style.css\"\r\n\r\n\r\nfunction SucessWarning(){\r\n     return(\r\n         <div className=\"sucess\">\r\n             <img src={process.env.PUBLIC_URL + '/success.svg'} alt=\"\"/>        \r\n             <h1>Thank you!</h1>\r\n             <h3>Your registration is complete</h3>\r\n         </div>\r\n     )\r\n}\r\n\r\nexport default SucessWarning","import SignUpForm from \"../components/signup/signup\";\r\nimport AddressRegistration from \"../components/address/address\";\r\nimport PersonalData from \"../components/personal-data/personal-data\";\r\nimport ConfirmationStep from '../components/confirmation/confirmationStep'\r\nimport SucessWarning from '../components/sucess/sucessPage'\r\n\r\n\r\nexport const steps = [\r\n    <SignUpForm/>,\r\n    <PersonalData />,\r\n    <AddressRegistration />,\r\n    <ConfirmationStep/>,\r\n    <SucessWarning/>\r\n  ];","import {useContext, useState, useEffect, createContext, ReactNode} from 'react';\r\nimport {steps} from '../steps-array/steps'\r\n\r\ntype User = {\r\n    email: string;\r\n    password: string;\r\n    features: boolean;\r\n    discounts: boolean;\r\n    name: string;\r\n    id: string;\r\n    phone: string;\r\n    country: any;\r\n    zip: string \r\n    street: string;\r\n    number: string; \r\n    city: string;\r\n    district: string;\r\n}\r\n\r\ntype FormContextData = {\r\n    userData: User;\r\n    currentStep: number;\r\n    onFormSubmit: (newData: Partial<User> ) => void;\r\n    nextStep: () => void;\r\n    previousStep: () => void;\r\n    stepperDisplay: string;\r\n}\r\n\r\ntype FormContextProviderProps = {\r\n    children: ReactNode\r\n}\r\n\r\nexport const FormContext = createContext({} as FormContextData)\r\n\r\n\r\nexport function FormContextProvider({children}: FormContextProviderProps) {\r\n    const [stepperDisplay, setStepperDisplay] = useState('block')\r\n    const [userData, setUserData] = useState<User>({} as User)\r\n    const [currentStep, setCurrentStep] = useState(0)\r\n\r\n    useEffect(()=> {\r\n        if(currentStep === steps.length - 1){\r\n          console.log(userData)\r\n          setStepperDisplay('none')\r\n        }\r\n      },[currentStep])    \r\n      \r\n    function onFormSubmit(newdata: Partial<User>) {\r\n    setUserData({...userData, ...newdata})\r\n    nextStep()\r\n    }\r\n\r\n    function nextStep(){\r\n    //if(currentStep === steps.length) return\r\n    setCurrentStep(currentStep + 1)\r\n    }\r\n    \r\n    function previousStep(){\r\n    setCurrentStep(currentStep - 1)\r\n    }\r\n\r\n    return(\r\n        <FormContext.Provider value={\r\n            {userData,\r\n            currentStep,\r\n            stepperDisplay,\r\n            onFormSubmit,\r\n            nextStep,\r\n            previousStep}\r\n        }>\r\n            {children}\r\n        </FormContext.Provider>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport const useForm = () => {\r\n    return useContext(FormContext)\r\n}","import { Stepper, Step, StepLabel, Box } from \"@material-ui/core\";\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport { steps } from \"../../steps-array/steps\";\r\nimport { ValidationContextProvider } from \"../../contexts/validationContext\";\r\n\r\nconst styles = {\r\n  stepper: {\r\n    width: '100%',\r\n    padding: '2rem 0'\r\n  }\r\n}\r\n\r\nexport function CheckoutForm() {\r\n  const { currentStep, stepperDisplay  } = useForm();\r\n \r\n\r\n  return (\r\n    <ValidationContextProvider>\r\n      <Box display={stepperDisplay}>\r\n        <Stepper activeStep={currentStep} alternativeLabel style={styles.stepper}>\r\n          <Step>\r\n            <StepLabel>Signup</StepLabel>\r\n          </Step>\r\n          <Step>\r\n            <StepLabel>Personal</StepLabel>\r\n          </Step>\r\n          <Step>\r\n            <StepLabel>Address</StepLabel>\r\n          </Step>\r\n          <Step>\r\n            <StepLabel>Confirm</StepLabel>\r\n          </Step>\r\n        </Stepper>\r\n      </Box>\r\n\r\n      {steps[currentStep]}\r\n\r\n    </ValidationContextProvider>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default CheckoutForm;\r\n","import \"./App.css\";\nimport {CheckoutForm} from \"./components/checkout/checkout-form\";\nimport { Container} from \"@material-ui/core\";\n\nimport {makeStyles} from '@material-ui/core/styles'\nimport \"fontsource-roboto\";\nimport {FormContextProvider} from './contexts/formContext'\n\nconst useStyles =  makeStyles({\n  container: {\n    backgroundColor: 'white',\n    padding: '2rem 2rem 4rem 2rem',\n    borderRadius: '15px',\n    boxShadow: '1px 2px 5px #7C7C7C',    \n  }\n})\n\n\nfunction App() {\n\n  const classes = useStyles()\n\n  return (\n    <div className=\"App\">\n      \n      <Container className={classes.container} maxWidth=\"xs\">\n        <FormContextProvider>\n          <CheckoutForm/>\n        </FormContextProvider>        \n      </Container>\n    </div>\n  );\n}\n\n\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}