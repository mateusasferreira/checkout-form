{"version":3,"sources":["contexts/validationContext.tsx","components/signup/signup.tsx","components/address/address.tsx","components/personal-data/personal-data.tsx","components/confirmation/confirmationStep.tsx","components/sucess/sucessPage.tsx","steps-array/steps.tsx","contexts/formContext.tsx","components/checkout/checkout-form.tsx","App.tsx","index.tsx"],"names":["ValidationContext","createContext","ValidationContextProvider","children","input","a","zip","replace","options","method","mode","headers","fetch","response","json","data","erro","validity","unvalid","message","locationData","city","localidade","street","logradouro","district","bairro","console","log","Provider","value","emailValidation","email","length","RegExp","test","passwordValidation","password","passwordConfirmValidation","passwordConfirm","idNumberValidation","idNumber","cpf","itsValid","forEach","repeatedCpf","sum","i","parseInt","substring","checkDigit1","checkDigit2","zipValidation","useValidation","useContext","SignUpForm","onFormSubmit","useForm","useState","setEmail","setPassword","setPasswordConfirm","discounts","setDiscounts","features","setFeatures","errors","setErrors","onSubmit","e","preventDefault","TextField","error","helperText","placeholder","onChange","target","onBlur","variant","label","margin","fullWidth","required","type","onFocus","FormControlLabel","control","Switch","checked","name","color","Button","styles","shortLeftInput","marginRight","marginBottom","width","shortRightInput","longLeftInput","extraShortRightInput","button","AddressRegistration","previousStep","setStreet","number","setNumber","setCity","setDistrict","setZip","className","action","style","onClick","PersonalData","userData","setName","id","setId","nameInput","marginTop","display","normalInput","ConfirmationStep","readMode","setReadMode","focused","defaultValue","InputProps","readOnly","SucessWarning","src","process","alt","steps","FormContext","FormContextProvider","stepperDisplay","setStepperDisplay","setUserData","currentStep","setCurrentStep","nextStep","useEffect","newdata","CheckoutForm","Box","Stepper","activeStep","Step","StepLabel","App","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.557b48dc.chunk.js","sourcesContent":["import {createContext, ReactNode, useContext} from 'react'\r\n\r\ntype Validation = {\r\n    passwordValidation: (password: string) => {unvalid: boolean, message: string},\r\n    passwordConfirmValidation: (password: string, passwordConfirm: string) => {unvalid: boolean, message: string}\r\n    emailValidation: (email: string) => {unvalid: boolean, message: string},\r\n    idNumberValidation: (idNumber: string) => {unvalid: boolean, message: string},\r\n    zipValidation: (input: string) => Promise<{\r\n        validity: {unvalid: boolean, message: string},\r\n        locationData: {\r\n            city: string\r\n            street: string\r\n            district: string\r\n        } | null\r\n    }>\r\n}\r\n\r\n\r\ntype ValidationContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nconst ValidationContext = createContext({} as Validation)\r\n\r\nexport function ValidationContextProvider({children}: ValidationContextProviderProps) {\r\n    \r\n   \r\n    function emailValidation (email: string) {\r\n        if (email.length == 0) return {unvalid:false, message: ''}\r\n        const regexValid = new RegExp(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/)\r\n        return !regexValid.test(email) ? (\r\n            {unvalid:true, message: 'Please, provide a valid email account'}\r\n        ) : ({unvalid:false, message: ''}) \r\n    }\r\n    \r\n    function passwordValidation(password: string) {\r\n        if (password.length == 0) return {unvalid:false, message: ''}\r\n        const regexValid = new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/)   \r\n         return !regexValid.test(password) ? (\r\n             {unvalid:true, message: 'your password must have at least 8 characters, one uppercase letter and one number'}\r\n             ) : ({unvalid:false, message: ''})          \r\n        }\r\n\r\n    function passwordConfirmValidation(password:string, passwordConfirm: string) {\r\n        if (password.length !== 0 && passwordConfirm.length == 0) return {unvalid: true, message: 'please, confirm your password'}\r\n        return (password !== passwordConfirm) ? ({unvalid: true, message: 'passwords don\\'t match'}) : ({unvalid: false, message: ''})\r\n    }\r\n\r\n    function idNumberValidation(idNumber: string) {\r\n\r\n        var cpf = idNumber.replace(/\\s/g, \"\")\r\n    \r\n        const repeatedCPFs = [\r\n          '00000000000',\r\n          '11111111111',\r\n          '22222222222',\r\n          '33333333333',\r\n          '44444444444',\r\n          '55555555555',\r\n          '66666666666',\r\n          '77777777777',\r\n          '88888888888',\r\n          '99999999999'\r\n        ]\r\n    \r\n        let itsValid = true\r\n    \r\n        repeatedCPFs.forEach(repeatedCpf => {if (repeatedCpf == cpf) itsValid = false})\r\n    \r\n        var sum:number = 0\r\n    \r\n        for (let i:number = 0; i < 9; i++) sum = sum + parseInt(cpf.substring(i, i+1)) * (10 - i)\r\n          \r\n        var checkDigit1 = (sum * 10) % 11\r\n    \r\n        if((checkDigit1 == 10) || (checkDigit1 == 10)) checkDigit1 = 0\r\n    \r\n        if (checkDigit1 !== parseInt(cpf.substring(9, 10))) itsValid = false\r\n    \r\n        sum = 0 \r\n    \r\n        for (let i:number = 0; i < 10; i++) sum = sum + parseInt(cpf.substring(i, i+1)) * (11 - i)\r\n    \r\n        var checkDigit2 = (sum * 10) % 11\r\n    \r\n        if((checkDigit2 == 10) || (checkDigit2 == 11)) checkDigit2 = 0\r\n    \r\n        if(checkDigit2 !== parseInt(cpf.substring(10, 11))) itsValid = false\r\n    \r\n        return (itsValid == true) ? ({unvalid:false, message: ''}) : ({unvalid: true, message: 'Invalid ID Number. Only brazilian ID numbers (CPFs) are accepted. Get a CPF for testing at https://www.4devs.com.br/gerador_de_cpf'})\r\n    }\r\n    \r\n    async function zipValidation(input: string) {\r\n        try {\r\n            const zip = input.replace(/\\D/g, '')\r\n            const options: RequestInit = {\r\n                method: 'GET',\r\n                mode: 'cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json'                \r\n                  },\r\n            }\r\n            const response = await fetch(`https://viacep.com.br/ws/${zip}/json`, options)\r\n            const data:any = await response.json()\r\n            if(data.erro) {\r\n                return {\r\n                    validity: {unvalid: true, message: 'Inexisting ZIP Code (for testing, try: 01001-001)'},\r\n                    locationData: null\r\n                }\r\n            } \r\n            return {\r\n                validity: {unvalid: false, message: ''},\r\n                locationData: {\r\n                    city: data.localidade,\r\n                    street: data.logradouro,\r\n                    district: data.bairro\r\n                }\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            return {\r\n                validity: {unvalid: true, message: 'Invalid ZIP code format (for testing, try: 01001-001)'},\r\n                locationData: null\r\n            }\r\n        }           \r\n    }\r\n           \r\n\r\n    return (\r\n        <ValidationContext.Provider value={{\r\n            emailValidation,\r\n            passwordValidation,\r\n            passwordConfirmValidation,\r\n            idNumberValidation,\r\n            zipValidation, \r\n        }}>\r\n            {children}\r\n        </ValidationContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useValidation = () => {\r\n    return useContext(ValidationContext)\r\n}","import { useState } from \"react\";\r\nimport { TextField, Button, Switch, FormControlLabel } from \"@material-ui/core\";\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport {useValidation} from '../../contexts/validationContext'\r\n\r\n\r\nfunction SignUpForm() {\r\n  const {passwordValidation, emailValidation, passwordConfirmValidation} = useValidation()\r\n  \r\n  const {onFormSubmit} = useForm()\r\n  \r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [password, setPassword] = useState<string>(\"\");\r\n  const [passwordConfirm, setPasswordConfirm] = useState<string>(\"\");\r\n  const [discounts, setDiscounts] = useState<boolean>(true);\r\n  const [features, setFeatures] = useState<boolean>(true);\r\n  const [errors, setErrors] = useState({\r\n    password: {\r\n      unvalid: false,\r\n      message: '',\r\n    },\r\n    passwordConfirm:{\r\n      unvalid: false,\r\n      message: '',\r\n    },\r\n    email: {\r\n      unvalid: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        if (errors.password.unvalid || errors.email.unvalid || errors.passwordConfirm.unvalid) return \r\n        onFormSubmit({ email, password, discounts, features });\r\n      }}\r\n    >\r\n      \r\n      <TextField\r\n        value={email}\r\n        error={errors.email.unvalid}\r\n        helperText={errors.email.message}\r\n        placeholder='user@email.com'\r\n        onChange={(e) => {\r\n          setEmail(e.target.value);\r\n        }}\r\n        onBlur={()=> {\r\n          setErrors(errors => ({...errors, email: emailValidation(email)}));\r\n        }}\r\n        variant=\"outlined\"\r\n        label=\"Email\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <TextField\r\n        error={errors.password.unvalid}\r\n        type=\"password\"\r\n        helperText={errors.password.message}\r\n        placeholder='e.g. Testing123'\r\n        onBlur={() => {          \r\n          setErrors(errors => ({...errors, password: passwordValidation(password)}));\r\n        }}\r\n        onFocus={()=>{\r\n          setErrors(errors => ({...errors, password:{unvalid:false, message: 'Disclaimer: this is just a prototype for testing, do not provide real passwords. Try something like \\'Testing123\\'.'}}))\r\n        }}\r\n        value={password}\r\n        onChange={(e) => {\r\n          setPassword(e.target.value);\r\n        }}\r\n        variant=\"outlined\"\r\n        label=\"Password\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <TextField\r\n        error={errors.passwordConfirm.unvalid}\r\n        type=\"password\"\r\n        helperText={errors.passwordConfirm.message}\r\n        placeholder='e.g. Testing123'\r\n        onBlur={() => {          \r\n          setErrors(errors => ({...errors, passwordConfirm: passwordConfirmValidation(password, passwordConfirm)}));\r\n        }}\r\n        value={passwordConfirm}\r\n        onChange={(e) => {\r\n          setPasswordConfirm(e.target.value);\r\n        }}\r\n        \r\n        variant=\"outlined\"\r\n        label=\"Confirm Password\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <FormControlLabel\r\n        label=\"Discounts\"\r\n        control={\r\n          <Switch\r\n            checked={discounts}\r\n            onChange={(e) => {\r\n              setDiscounts(e.target.checked);\r\n            }}\r\n            name=\"promoções\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n      />\r\n      <FormControlLabel\r\n        label=\"New Features\"\r\n        control={\r\n          <Switch\r\n            checked={features}\r\n            onChange={(e) => {\r\n              setFeatures(e.target.checked);\r\n            }}\r\n            name=\"promoções\"\r\n            color=\"primary\"\r\n          />\r\n        }\r\n      />\r\n\r\n      <Button type=\"submit\" color=\"primary\" variant=\"contained\">\r\n        Sign Up\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SignUpForm;\r\n","import {TextField, Button} from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport {useValidation} from '../../contexts/validationContext'\r\n \r\n\r\n\r\nfunction AddressRegistration() {\r\n  const {onFormSubmit, previousStep} = useForm()\r\n  const {zipValidation} = useValidation()\r\n    \r\n  const [street, setStreet] = useState<string>(\"\");\r\n  const [number, setNumber] = useState<string>('');\r\n  const [city, setCity] = useState<string>('');\r\n  const [district, setDistrict] = useState<string>('');\r\n  const [zip, setZip] = useState<string>('');\r\n\r\n  const [errors, setErrors] = useState({\r\n    zip: {\r\n      unvalid: false, \r\n      message: ''\r\n    }\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form \r\n        className=\"registrationForm\"\r\n        action=\"submit\" \r\n        onSubmit={(e) => {\r\n        e.preventDefault()\r\n        if (errors.zip.unvalid) return\r\n        onFormSubmit({street, number, city, district, zip})}}>\r\n        <TextField\r\n          value={zip}\r\n          error={errors.zip.unvalid}\r\n          helperText={errors.zip.message}\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setZip(e.target.value);\r\n          }}\r\n          onBlur={async () => {\r\n            const response = await zipValidation(zip)\r\n            setErrors({zip:response.validity}) \r\n            if(response.locationData) {\r\n              setCity(response.locationData.city)\r\n              setStreet(response.locationData.street)\r\n              setDistrict(response.locationData.district)\r\n            }\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Zip Code\" \r\n          style={styles.shortLeftInput}   \r\n          required\r\n        ></TextField>\r\n        \r\n        <TextField\r\n          value={street}\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setStreet(e.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Street\"\r\n          style={styles.longLeftInput}\r\n          required\r\n        ></TextField>\r\n        <TextField\r\n          value={number}\r\n          type=\"text\"\r\n          onChange={(e) => {\r\n            setNumber(e.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"Number\"\r\n          style={styles.extraShortRightInput}\r\n          required\r\n        ></TextField>\r\n        \r\n        <TextField\r\n          type=\"text\"\r\n          value={city}\r\n          onChange={(e) => {\r\n            setCity(e.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"City\"\r\n          style={styles.shortLeftInput}\r\n          required\r\n        ></TextField>\r\n        <TextField\r\n          type=\"text\"\r\n          value={district}\r\n          onChange={(e) => {\r\n            setDistrict(e.target.value);\r\n          }}\r\n          variant=\"outlined\"\r\n          label=\"District\"\r\n          required\r\n          style={styles.shortRightInput}\r\n        ></TextField>\r\n        <Button onClick={previousStep} style={styles.button} color=\"primary\" variant=\"contained\">\r\n          Back\r\n        </Button>\r\n        <Button type=\"submit\" color=\"primary\" variant=\"contained\">\r\n          Next\r\n        </Button>\r\n        \r\n      </form>\r\n\r\n        \r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  shortLeftInput: {\r\n    marginRight: '1rem',\r\n    marginBottom: '1rem',\r\n    width: 'calc(50% - 1rem)',\r\n  },\r\n  shortRightInput: {\r\n    marginBottom: '1rem',\r\n    width: '50%'\r\n  },\r\n  longLeftInput: {\r\n    marginRight: '1rem',\r\n    marginBottom: '1rem',\r\n    width: 'calc(75% - 1rem)',\r\n  },\r\n  extraShortRightInput: {\r\n    marginBottom: '1rem',\r\n    width: '25%'\r\n  },\r\n  button: {\r\n   marginRight: '1rem' \r\n  }\r\n}\r\n\r\nexport default AddressRegistration;\r\n","import { useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport {useValidation} from '../../contexts/validationContext'\r\n\r\n\r\nfunction PersonalData() {\r\n  const { onFormSubmit, userData } = useForm();\r\n\r\n  const {idNumberValidation} = useValidation()\r\n\r\n  const [name, setName] = useState<string>(userData.name);\r\n  const [id, setId] = useState<string>(userData.id);\r\n\r\n  const [errors, setErrors] = useState({\r\n    idNumber: {\r\n      unvalid: false,\r\n      message: ''\r\n    }\r\n  })\r\n\r\n\r\n  return (\r\n    <form\r\n    className=\"signInForm\"\r\n      action=\"submit\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        if (errors.idNumber.unvalid) return\r\n        onFormSubmit({ name, id });\r\n      }}\r\n    >\r\n      <TextField\r\n        value={name}\r\n        onChange={(e) => {\r\n          setName(e.target.value);\r\n        }}\r\n        placeholder='Name Surname'\r\n        variant=\"outlined\"\r\n        label=\"Full Name\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <TextField\r\n        error={errors.idNumber.unvalid}\r\n        helperText={errors.idNumber.message}\r\n        value={id}\r\n        onChange={(e) => {\r\n          setId(e.target.value);\r\n        }}\r\n        onBlur={()=>{\r\n          setErrors(errors => ({...errors, idNumber: idNumberValidation(id)}))\r\n        }}\r\n        variant=\"outlined\"\r\n        type=\"number\"\r\n        label=\"ID Number (CPF)\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required\r\n      ></TextField>\r\n      <Button type=\"submit\" color=\"primary\" variant=\"contained\">\r\n        Next\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default PersonalData;\r\n","import { useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\n\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport {useValidation} from '../../contexts/validationContext'\r\n\r\nfunction ConfirmationStep() {\r\n  const { userData, onFormSubmit } = useForm();\r\n\r\n  const {zipValidation, idNumberValidation} = useValidation()\r\n\r\n  const [readMode, setReadMode] = useState<boolean>(true);\r\n\r\n  const [name, setName] = useState<string>(userData.name);\r\n  const [id, setId] = useState<string>(userData.id);\r\n  const [street, setStreet] = useState<string>(userData.street);\r\n  const [city, setCity] = useState<string>(userData.city);\r\n  const [district, setDistrict] = useState<string>(userData.district);\r\n  const [number, setNumber] = useState<string>(userData.number);\r\n  const [zip, setZip] = useState<string>(userData.zip);\r\n\r\n  const [errors, setErrors] = useState({\r\n    zip: {\r\n      unvalid: false, \r\n      message: ''\r\n    },\r\n    idNumber: {\r\n      unvalid: false,\r\n      message: ''\r\n    }\r\n  })\r\n\r\n\r\n  function toggleReadMode() {\r\n    setReadMode(!readMode);\r\n  }\r\n\r\n  return (\r\n    <form action=\"submit\"\r\n    onSubmit={(e)=> {\r\n      e.preventDefault();\r\n      if (errors.zip.unvalid || errors.idNumber.unvalid) return\r\n      onFormSubmit({name, id, street, number, city, district, zip})\r\n    }}\r\n    >\r\n      <Button \r\n      variant=\"outlined\" \r\n      color=\"primary\" \r\n      onClick={toggleReadMode}\r\n      >\r\n        {readMode ? 'Edit Data' : 'Done' }\r\n      </Button>\r\n      \r\n      <TextField\r\n        id=\"name\"\r\n        value={name}\r\n        onChange={(e) => {\r\n          setName(e.target.value);\r\n        }}\r\n        label=\"Name\"\r\n        focused={!readMode}\r\n        defaultValue={name}\r\n        style={styles.nameInput}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        error={errors.idNumber.unvalid}\r\n        helperText={errors.idNumber.message}\r\n        id=\"id\"\r\n        value={id}\r\n        onChange={(e) => {\r\n            setId(e.target.value);\r\n        }}\r\n        onBlur={(e)=> {\r\n          setErrors(errors => ({...errors, idNumber: idNumberValidation(id)}))\r\n        }}\r\n        label=\"ID Number\"\r\n        type=\"number\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        style={styles.normalInput}\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"zip\"\r\n        error={errors.zip.unvalid}\r\n        helperText={errors.zip.message}\r\n        value={zip}\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          setZip(e.target.value);\r\n        }}\r\n        onBlur={async () => {\r\n          const response = await zipValidation(zip)\r\n          setErrors(errors => ({...errors, zip:response.validity})) \r\n          if(response.locationData) {\r\n            setCity(response.locationData.city)\r\n            setStreet(response.locationData.street)\r\n            setDistrict(response.locationData.district)\r\n          }\r\n        }}\r\n        label=\"Zip Code\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        style={styles.normalInput}\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"street\"\r\n        value={street}\r\n        onChange={(e) => {\r\n          setStreet(e.target.value);\r\n        }}\r\n        label=\"Street\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        style={styles.normalInput}\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"number\"\r\n        value={number}\r\n        onChange={(e) => {\r\n          setNumber(e.target.value);\r\n        }}\r\n        label=\"Number\"\r\n        focused={!readMode}\r\n        style={styles.normalInput}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"city\"\r\n        value={city}\r\n        onChange={(e) => {\r\n          setCity(e.target.value);\r\n        }}\r\n        label=\"City\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        style={styles.normalInput}\r\n\r\n        fullWidth\r\n        required\r\n      />\r\n      <TextField\r\n        id=\"district\"\r\n        value={district}\r\n        onChange={(e) => {\r\n          setDistrict(e.target.value);\r\n        }}\r\n        label=\"District\"\r\n        focused={!readMode}\r\n        InputProps={{\r\n          readOnly: readMode,\r\n        }}\r\n        style={styles.normalInput}\r\n        fullWidth\r\n        required\r\n      />      \r\n      \r\n      <Button \r\n      variant=\"contained\"\r\n      type=\"submit\"\r\n      color=\"primary\" \r\n      \r\n      >\r\n        Confirm and Submit\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  nameInput: {\r\n    marginBottom: '1rem',\r\n    marginTop: '1rem',\r\n    width: '50%',\r\n    display: 'block'\r\n  },\r\n  normalInput: {\r\n    marginBottom: '1rem',\r\n    width: '50%'\r\n  }\r\n\r\n}\r\n\r\nexport default ConfirmationStep;\r\n","import \"./style.css\"\r\n\r\n\r\nfunction SucessWarning(){\r\n     return(\r\n         <div className=\"sucess\">\r\n             <img src={process.env.PUBLIC_URL + '/success.svg'} alt=\"\"/>        \r\n             <h1>Thank you</h1>\r\n             <h3>Your registration is complete</h3>\r\n         </div>\r\n     )\r\n}\r\n\r\nexport default SucessWarning","import SignUpForm from \"../components/signup/signup\";\r\nimport AddressRegistration from \"../components/address/address\";\r\nimport PersonalData from \"../components/personal-data/personal-data\";\r\nimport ConfirmationStep from '../components/confirmation/confirmationStep'\r\nimport SucessWarning from '../components/sucess/sucessPage'\r\n\r\n\r\nexport const steps = [\r\n    <SignUpForm/>,\r\n    <PersonalData />,\r\n    <AddressRegistration />,\r\n    <ConfirmationStep/>,\r\n    <SucessWarning/>\r\n  ];","import {useContext, useState, useEffect, createContext, ReactNode} from 'react';\r\nimport {steps} from '../steps-array/steps'\r\n\r\ntype User = {\r\n    email: string;\r\n    password: string;\r\n    features: boolean;\r\n    discounts: boolean;\r\n    name: string;\r\n    id: string;\r\n    street: string;\r\n    number: string; \r\n    city: string;\r\n    district: string;\r\n    zip: string \r\n}\r\n\r\ntype FormContextData = {\r\n    userData: User;\r\n    currentStep: number;\r\n    onFormSubmit: (newData: Partial<User> ) => void;\r\n    nextStep: () => void;\r\n    previousStep: () => void;\r\n    stepperDisplay: string;\r\n}\r\n\r\ntype FormContextProviderProps = {\r\n    children: ReactNode\r\n}\r\n\r\nexport const FormContext = createContext({} as FormContextData)\r\n\r\n\r\nexport function FormContextProvider({children}: FormContextProviderProps) {\r\n    const [stepperDisplay, setStepperDisplay] = useState('block')\r\n    const [userData, setUserData] = useState<User>({} as User)\r\n    const [currentStep, setCurrentStep] = useState(0)\r\n\r\n    useEffect(()=> {\r\n        if(currentStep === steps.length - 1){\r\n          console.log(userData)\r\n          setStepperDisplay('none')\r\n        }\r\n      },[currentStep])    \r\n      \r\n    function onFormSubmit(newdata: Partial<User>) {\r\n    setUserData({...userData, ...newdata})\r\n    nextStep()\r\n    }\r\n\r\n    function nextStep(){\r\n    //if(currentStep === steps.length) return\r\n    setCurrentStep(currentStep + 1)\r\n    }\r\n    \r\n    function previousStep(){\r\n    setCurrentStep(currentStep - 1)\r\n    }\r\n\r\n    return(\r\n        <FormContext.Provider value={\r\n            {userData,\r\n            currentStep,\r\n            stepperDisplay,\r\n            onFormSubmit,\r\n            nextStep,\r\n            previousStep}\r\n        }>\r\n            {children}\r\n        </FormContext.Provider>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport const useForm = () => {\r\n    return useContext(FormContext)\r\n}","import { Stepper, Step, StepLabel, Box } from \"@material-ui/core\";\r\nimport { useForm } from \"../../contexts/formContext\";\r\nimport { steps } from \"../../steps-array/steps\";\r\nimport { ValidationContextProvider } from \"../../contexts/validationContext\";\r\n\r\nexport function CheckoutForm() {\r\n  const { currentStep, stepperDisplay  } = useForm();\r\n\r\n  \r\n\r\n  return (\r\n    <ValidationContextProvider>\r\n      <Box display={stepperDisplay}>\r\n        <Stepper activeStep={currentStep}>\r\n          <Step>\r\n            <StepLabel>Signup</StepLabel>\r\n          </Step>\r\n          <Step>\r\n            <StepLabel>Personal</StepLabel>\r\n          </Step>\r\n          <Step>\r\n            <StepLabel>Address</StepLabel>\r\n          </Step>\r\n          <Step>\r\n            <StepLabel>Confirmation</StepLabel>\r\n          </Step>\r\n        </Stepper>\r\n      </Box>\r\n\r\n      {steps[currentStep]}\r\n\r\n    </ValidationContextProvider>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default CheckoutForm;\r\n","import \"./App.css\";\nimport {CheckoutForm} from \"./components/checkout/checkout-form\";\nimport { Container, Typography } from \"@material-ui/core\";\nimport \"fontsource-roboto\";\nimport {FormContextProvider} from './contexts/formContext'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"sm\">\n        <FormContextProvider>\n          <CheckoutForm/>\n        </FormContextProvider>        \n      </Container>\n    </div>\n  );\n}\n\n\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}